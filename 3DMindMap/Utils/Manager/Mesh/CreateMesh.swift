import SwiftUI
import RealityKit

class CreateMesh {
    public func createNode(id: String, position: Point3D, bgColor: String?, borderColor: String?) -> ModelEntity {
        // üé® „Éë„Çπ„ÉÜ„É´„Ç´„É©„Éº„ÅÆÂÜÖÂÅ¥„ÅÆPlane
        let boxMesh = MeshResource.generatePlane(width: 1, height: 0.3, cornerRadius: .infinity)
        let pastelColor = UIColor(Color(bgColor ?? CustomColor.defaultColor)).withAlphaComponent(0.9)
        let material = UnlitMaterial(color: pastelColor)
        let innerEntity = ModelEntity(mesh: boxMesh, materials: [material])
        let borderWidth = 0.04
           
        // üé® Â§ñÂÅ¥„ÅÆÊû†Á∑ö (Plane„ÇíÂ∞ë„ÅóÂ§ß„Åç„Åè)
        let borderMesh = MeshResource.generatePlane(width: 1 + Float(borderWidth), height: Float(0.3 + borderWidth), cornerRadius: .infinity)
        let borderUIColor = UIColor(Color(borderColor ?? bgColor ?? CustomColor.defaultColor))
        let borderMaterial = UnlitMaterial(color: borderUIColor)
        let borderEntity = ModelEntity(mesh: borderMesh, materials: [borderMaterial])
        borderEntity.name = "border_\(id)"
       
        // ‚úÖ „Éé„Éº„Éâ„Ç∞„É´„Éº„Éó„ÅÆË¶™Entity
        let nodeEntity = ModelEntity()
        nodeEntity.addChild(borderEntity)
        nodeEntity.addChild(innerEntity)
       
        // üìè ‰ΩçÁΩÆ„Éª„Çµ„Ç§„Ç∫„ÅÆË™øÊï¥
        borderEntity.position.z = -0.001  // Êû†Á∑ö„ÇíÂ∞ë„ÅóÂ••„Å´ÈÖçÁΩÆ
        innerEntity.position.z = 0.0
       
        // ü™ù ‰ΩçÁΩÆ„Å®ÂêçÂâç„ÅÆË®≠ÂÆö
        nodeEntity.transform.translation = SIMD3(position)
        nodeEntity.name = id
        nodeEntity.components.set(BillboardComponent())
        // „Éâ„É©„ÉÉ„Ç∞ÂèØËÉΩ„Å´„Åô„Çã„Åü„ÇÅ„ÅÆÂøÖÈ†à„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíËøΩÂä†
        // 1. Ë°ùÁ™ÅÂà§ÂÆö (CollisionShapeComponent)
        let collisionShape = ShapeResource.generateBox(size: [0.3, 0.2, 0.1])
        nodeEntity.components.set(CollisionComponent(shapes: [collisionShape], isStatic: false, filter: .default))
        
        // 2. Áâ©ÁêÜÁâπÊÄß„ÅÆË®≠ÂÆö (PhysicsBodyComponent)
//        let physicsMaterial = PhysicsMaterialResource.generate(friction: 0.8, restitution: 0.0)
//        nodeEntity.components.set(PhysicsBodyComponent(shapes: nodeEntity.collision!.shapes, mass: 0.0, material: physicsMaterial, mode: .dynamic))
        // 3. „É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆ„Çø„Éº„Ç≤„ÉÉ„ÉàË®≠ÂÆö (InputTargetComponent)
        nodeEntity.components.set(InputTargetComponent(allowedInputTypes: .indirect))
        nodeEntity.components.set(OpacityComponent(opacity: 0))
       
        return nodeEntity
    }
    public func createTextEntity(text: String, position: Point3D) -> ModelEntity {
        let textMesh = MeshResource.generateText(
            text,
            extrusionDepth: 0.01,
            font: .systemFont(ofSize: 0.1),
            containerFrame: .zero,
            alignment: .center,
            lineBreakMode: .byWordWrapping
        )
        
        let textMaterial = UnlitMaterial(color: .black)
        let textEntity = ModelEntity(mesh: textMesh, materials: [textMaterial])
        let bounding = textEntity.visualBounds(relativeTo: nil)

        // **„ÉÜ„Ç≠„Çπ„Éà„Çí‰∏≠Â§Æ„Å´ÈÖçÁΩÆ**
        textEntity.position.x = -bounding.center.x
        textEntity.position.y = -bounding.center.y
        textEntity.position.z = 0.01
        
        // ÊñáÂ≠ó„ÅÆÂêë„Åç„Çí‰øÆÊ≠£
        textEntity.orientation = simd_quatf(angle: 0, axis: [0, 1, 0])
        
        
        //  textEntity.transform.translation = SIMD3(position)
        
        return textEntity
    }
}
